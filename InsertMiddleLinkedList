#include <iostream>

using namespace std;

struct Node
{
    int data;
    struct Node *next;
};

Node* pushNode(int data)
{
    struct Node* n = new Node;
    n->data = data;
    n->next = NULL;
    return n;
}
void InsertMiddle(Node** head_ref,int i)
{
    if (*head_ref == NULL)
    {
        *head_ref = pushNode(i);
    }
    else
    {
        Node* newNode = pushNode(i);
        Node* ptr = *head_ref;
        int length = 0;
        while (ptr != NULL)
        {
            length++;
            ptr = ptr->next;
        }
        int count = ((length % 2) == 0) ? (length / 2) :
                                    (length + 1) / 2;
        ptr = *head_ref;
        while (count-- > 1)
        {
            ptr = ptr->next;
        }
        newNode->next = ptr->next;
        ptr->next = newNode;
    }
}
void ShowList(Node* head)
{
    while (head != NULL)
    {
        cout << head->data << " " << endl;
        head = head->next;
    }
}
int main()
{
    struct Node* head = NULL;
    head = pushNode(1);
    head->next = pushNode(2);
    head->next->next = pushNode(4);
    head->next->next->next = pushNode(5);

    cout << "Linked list before function: " << endl;
    ShowList(head);

    int i;
    cin >> i;
    InsertMiddle(&head,i);

    cout << "Linked list after function: " << endl;
    ShowList(head);
    return 0;
}
